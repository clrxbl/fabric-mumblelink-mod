plugins {
    id "java"
    id "idea"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "1.3.40"
    id "fabric-loom" version "0.2.5-SNAPSHOT"
    id "com.github.ben-manes.versions" version "0.21.0"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "com.matthewprenger.cursegradle" version "1.3.0"
}

configurations {
    shaded
    implementation.extendsFrom shaded
}

repositories {
    maven {
        url = "http://maven.fabricmc.net/"
        name = "Fabric"
    }
    maven {
        url = "https://kotlin.bintray.com/kotlinx"
        name = "Kotlin X"
    }
    maven { url = "https://dl.bintray.com/magneticflux/maven" }
    maven {
        url = "https://minecraft.curseforge.com/api/maven"
        name = "CurseForge"
    }
    maven { url = 'http://maven.sargunv.s3-website-us-west-2.amazonaws.com/' }
    jcenter()
}

// Enable Java 8 language features
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompile "net.fabricmc:fabric-language-kotlin:1.3.40+build.+"
    include "net.fabricmc:fabric-language-kotlin:1.3.40+build.+"

    modCompile "io.github.prospector.modmenu:ModMenu:1.6.2-92"

    shaded("com.skaggsm:java-mumble-link:0.2.3") {
        exclude group: "net.java.dev.jna"
    }
}

processResources {
    inputs.properties "version": project.version,
            "archives_base_name": project.archives_base_name

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version,
                "archives_base_name": project.archives_base_name
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

remapJar {
    dependsOn shadowJar
    input = shadowJar.archiveFile
}

shadowJar {
    configurations = [project.configurations.shaded]
    relocate "com.skaggsm.jmumblelink", "com.skaggsm.mumblelinkmod.shaded.jmumblelink"
    relocate "com.skaggsm.sharedmemory", "com.skaggsm.mumblelinkmod.shaded.sharedmemory"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

curseforge {
    // Stored in ~/.gradle/gradle.properties
    apiKey = project.curseApiKey

    project {
        id = project.curseforge_id
        releaseType = "release"
        addGameVersion "1.14.4"
        mainArtifact(remapJar) {
            displayName = "$archives_base_name-$project.version [$project.minecraft_version]"
            relations {
                requiredDependency "fabric"
                embeddedLibrary "fabric-language-kotlin"
            }
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

afterEvaluate {
    // CurseGradle generates tasks in afterEvaluate for each project
    // There isn't really any other way to make it depend on a task unless it is an AbstractArchiveTask
    tasks.getByName("curseforge${project.curseforge_id}").dependsOn publish
    tasks.getByName("curseforge${project.curseforge_id}").dependsOn remapJar
}
